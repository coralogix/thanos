// Copyright (c) The Thanos Authors.
// Licensed under the Apache License 2.0.

syntax = "proto3";
package thanos;

option go_package = "querypb";

import "gogoproto/gogo.proto";
import "store/storepb/types.proto";
import "store/storepb/rpc.proto";
import "store/storepb/prompb/types.proto";

option (gogoproto.sizer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;

// Do not generate XXX fields to reduce memory footprint and opening a door
// for zero-copy casts to/from prometheus data types.
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_sizecache_all) = false;

message QueryRequest {
  string query = 1;

  int64 time_seconds = 2;
  int64 timeout_seconds = 3;
  int64 max_resolution_seconds = 4;
  int64 lookback_delta_seconds = 5;
    
  repeated string replica_labels = 6;

  repeated StoreMatchers storeMatchers = 7 [(gogoproto.nullable) = false];

  bool enableDedup = 8;
  bool enablePartialResponse = 9;
  bool enableQueryPushdown = 10;
  bool skipChunks = 11;

  ShardInfo shard_info = 12;
}

message StoreMatchers {
  repeated LabelMatcher labelMatchers = 1 [(gogoproto.nullable) = false];
}

message QueryResponse {
  oneof result {
    /// warnings are additional messages coming from the PromQL engine.
    string warnings = 1;

    /// timeseries is one series from the result of the executed query.
    prometheus_copy.TimeSeries timeseries = 2;
  }
}

message QueryRangeRequest {
  string query = 1;

  int64 start_time_seconds = 2;
  int64 end_time_seconds = 3;
  int64 interval_seconds = 4;

  int64 timeout_seconds = 5;
  int64 max_resolution_seconds = 6;
  int64 lookback_delta_seconds = 7;
  
  repeated string replica_labels = 8;

  repeated StoreMatchers storeMatchers = 9 [(gogoproto.nullable) = false];

  bool enableDedup = 10;
  bool enablePartialResponse = 11;
  bool enableQueryPushdown = 12;
  bool skipChunks = 13;

  ShardInfo shard_info = 14;
}

message QueryRangeResponse {
  oneof result {
    /// warnings are additional messages coming from the PromQL engine.
    string warnings = 1;

    /// timeseries is one series from the result of the executed query.
    prometheus_copy.TimeSeries timeseries = 2;
  }
}

service Query {
  rpc Query(QueryRequest) returns (stream QueryResponse);

  rpc QueryRange(QueryRangeRequest) returns (stream QueryRangeResponse);
}
